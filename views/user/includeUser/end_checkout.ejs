<!-- tap to top Section Start -->

<!-- tap to top Section End -->

<div class="bg-overlay"></div>

<!-- latest jquery-->

<!-- Bootstrap js-->
<script src="/static/user/js/bootstrap/bootstrap.bundle.min.js"></script>

<!-- feather icon js-->
<script src="/static/user/js/feather/feather.min.js"></script>

<!-- lazyload js-->
<script src="/static/user/js/lazysizes.min.js"></script>

<!-- Slick js-->
<script src="/static/user/js/slick/slick.js"></script>
<script src="/static/user/js/slick/slick-animation.min.js"></script>
<script src="/static/user/js/slick/custom_slick.js"></script>

<!-- newsletter js -->
<script src="/static/user/js/newsletter.js"></script>

<!-- add to cart modal resize -->
<script src="/static/user/js/cart_modal_resize.js"></script>

<!-- Add To Home js -->
<script src="/static/user/js/pwa.js"></script>

<!-- add to cart modal resize -->
<script src="/static/user/js/cart_modal_resize.js"></script>

<!-- feather icon js-->
<!-- <script src="/static/user/js/timer1.js"></script> -->

<!-- notify js -->
<script src="/static/user/js/bootstrap/bootstrap-notify.min.js"></script>

<!-- script js -->
<script src="/static/user/js/theme-setting.js"></script>
<script src="/static/user/js/script.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src=/static/user/js/custom/userValidation.js></script>
<!-- Include Elevate Zoom -->

<!-- Bootstrap JS, Popper.js, and jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="/static/user/js/custom/dashboard_address.js"></script>
<script>
  function toggleHeart(element) {
    element.classList.toggle('active');
  }

</script>
<!-- Add your Slick carousel initialization script at the bottom of your page -->
<script>
  $(document).ready(function () {
    // Main slider
    $('.slick-slider-main').slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: true,
      fade: true,
      asNavFor: '.slick-slider-nav'
    });

    // Navigation slider
    $('.slick-slider-nav').slick({
      slidesToShow: 3,
      slidesToScroll: 1,
      asNavFor: '.slick-slider-main',
      dots: true,
      centerMode: true,
      focusOnSelect: true
    });
  });
</script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const logoutLink = document.getElementById("logout_main_nav");

    logoutLink.addEventListener("click", function (event) {
      event.preventDefault();

      // Send a POST request to /logout using fetch
      fetch("/logout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        // You can include any data you want to send with the request
        // For example, you might want to include a CSRF token if your server requires it
        body: JSON.stringify({}),
      })
        .then((response) => {
          if (response.status === 200) {
            // Successful logout, you can handle the redirection here if needed
            window.location.href = "/products"; // Redirect to the homepage
          } else {
            // Handle other response statuses (e.g., error)
            console.error("Logout failed");
          }
        })
        .catch((error) => {
          console.error("Error occurred during logout:", error);
        });
    });
  });

</script>


<script>
  document.getElementById('placeOrderButton').addEventListener('click', function (e) {
    var selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    if (!selectedAddress) {
      alert('Please select an address.');
      e.preventDefault(); // Prevent the form from submitting
    } else {
      // Proceed with form submission
      // This part depends on how you handle form submission (e.g., using fetch API or traditional form post)
    }
  });


</script>



<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const placeOrderButton = document.getElementById("placeOrderButton");

    placeOrderButton.addEventListener("click", async (event) => {
      event.preventDefault();

      const paymentMethod = document.querySelector(
        'input[name="paymentMethod"]:checked'
      ).value;
      const address = document.querySelector('input[name="selectedAddress"]').value
      console.log(`Address in front End is ${ address }`)

      if (paymentMethod === "PayOnline") {
        try {
          const response = await fetch("/get-amount-keys-payment-address", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              // Set the Razorpay API key in the headers
            },
          });

          response.json()
            .then((orderData) => { // Use .then to handle the response
              console.log(`Orderdata cart is  ${ orderData.cart.payable }`);
              console.log(`Orderdata keys.id is  ${ orderData.keys.keyId }`);
              console.log(`Orderdata keys.secret is  ${ orderData.keys.keySecret }`);
              const options = {
                key: orderData.keys.keyId,
                amount: orderData.cart.payable * 100,
                currency: "INR",
                name: "Foot Forward",
                description: "Order Payment",
                image: "your_logo_url",
                handler: function (response) {
                  console.log(response);
                  if (response.razorpay_payment_id) {
                    fetch('/place-order', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({
                        paymentId: response.razorpay_payment_id,
                        paymentMethod: "PayOnline",
                        address: address
                      }),
                    })
                      .then(response => {
                        if (!response.ok) {
                          throw new Error('Network response was not ok ' + response.statusText);
                        }
                        return response.json();
                      })
                      .then(orderResponse => {
                        console.log(orderResponse);
                        window.location.href = '/orderSuccess'; // Redirect to the success page
                      })
                      .catch(error => {
                        console.error('Fetch error:', error);
                      });
                  } else {
                    console.log('Payment failed or was cancelled.');
                  }
                },
                prefill: {
                  name: "User's Name",
                  email: "user@example.com",
                  contact: "user_mobile_number",
                },
              };

              const razorpayPayment = new Razorpay(options);
              razorpayPayment.open();
            }).catch((error) => {
              console.error("Error parsing response:", error);
            });
        } catch (error) {
          console.error("Error:", error);
        }
      }
      if (paymentMethod === "COD" ) {
        fetch('/place-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            paymentMethod: "COD",
            address: address,
          }),
        }).then(response => {
                        if (!response.ok) {
                          throw new Error('Error placing order ' + response.statusText);
                        }
                        return response.json();
                      })
          .then(orderResponse => {
            console.log(orderResponse);
            window.location.href = '/orderSuccess'; // Redirect to the success page
          })
      }
      if (paymentMethod === "Wallet" ) {
        fetch('/place-order', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            paymentMethod: "Wallet",
            address: address,
          }),
        }).then(response => {
                        if (!response.ok) {
                          throw new Error('Error placing order ' + response.statusText);
                        }
                        return response.json();
                      })
          .then(orderResponse => {
            console.log(orderResponse);
            window.location.href = '/orderSuccess'; // Redirect to the success page
          })
      }
    });
  });
</script>

//for copy code in accordion
<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Find all copy buttons in the accordion
    const copyButtons = document.querySelectorAll('#couponsAccordion .coupon-card button');

    copyButtons.forEach(button => {
      button.addEventListener('click', function () {
        // Find the corresponding accordion button
        const accordionHeader = this.closest('.accordion-item').querySelector('.accordion-header');
        const couponCode = accordionHeader.querySelector('.accordion-button').textContent.trim();

        // Copy the coupon code to the clipboard
        navigator.clipboard.writeText(couponCode).then(() => {
          alert('Coupon code copied to clipboard: ' + couponCode);
        }).catch(err => {
          console.error('Error copying text to clipboard', err);
        });
      });
    });
  });
</script>


<script>
  document.getElementById('applyCoupan').addEventListener('click', function (e) {
    e.preventDefault(); // Prevent default form submission
    const couponCode = document.getElementById('couponCodeInput').value;

    fetch('/apply-coupon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ couponCode: couponCode })
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        console.log('Coupon applied:', data);
        // Display a success message using Swal
        Swal.fire({
          title: 'Success!',
          text: 'Coupon applied successfully!',
          icon: 'success',
          confirmButtonText: 'OK'
        });
        // Additional logic to handle successful coupon application
      })
      .catch(error => {
        console.error('Error applying coupon:', error);
        // Optionally, you could also use Swal to display error messages
        Swal.fire({
          title: 'Error!',
          text: 'Failed to apply coupon.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      });
  });



  document.getElementById('removeCoupan').addEventListener('click', function (e) {
    e.preventDefault(); // Prevent default form submission

    fetch('/remove-coupon', {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        console.log('Coupon removed:', data);

        // Display a success message using Swal
        Swal.fire({
          title: 'Success!',
          text: 'Coupon removed successfully!',
          icon: 'success',
          confirmButtonText: 'OK'
        })
          .then(() => {
            // Reload the page after the user clicks "OK" or outside the modal
            location.reload();
          });
      })
      .catch(error => {
        console.error('Error applying coupon:', error);
        // Optionally, you could also use Swal to display error messages
        Swal.fire({
          title: 'Error!',
          text: 'Failed to apply coupon.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      });
  });


</script>







</body>

</html>