<!-- tap to top Section Start -->

<!-- tap to top Section End -->

<div class="bg-overlay"></div>

<!-- latest jquery-->

<!-- Bootstrap js-->
<script src="/static/user/js/bootstrap/bootstrap.bundle.min.js"></script>

<!-- feather icon js-->
<script src="/static/user/js/feather/feather.min.js"></script>

<!-- lazyload js-->
<script src="/static/user/js/lazysizes.min.js"></script>

<!-- Slick js-->
<script src="/static/user/js/slick/slick.js"></script>
<script src="/static/user/js/slick/slick-animation.min.js"></script>
<script src="/static/user/js/slick/custom_slick.js"></script>

<!-- newsletter js -->
<script src="/static/user/js/newsletter.js"></script>

<!-- add to cart modal resize -->
<script src="/static/user/js/cart_modal_resize.js"></script>

<!-- Add To Home js -->
<script src="/static/user/js/pwa.js"></script>

<!-- add to cart modal resize -->
<script src="/static/user/js/cart_modal_resize.js"></script>

<!-- feather icon js-->
<!-- <script src="/static/user/js/timer1.js"></script> -->

<!-- notify js -->
<script src="/static/user/js/bootstrap/bootstrap-notify.min.js"></script>

<!-- script js -->
<script src="/static/user/js/theme-setting.js"></script>
<script src="/static/user/js/script.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src=/static/user/js/custom/userValidation.js></script>
<!-- Include Elevate Zoom -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/elevatezoom/3.0.8/jquery.elevatezoom.min.js"></script>
<script>
  function toggleHeart(element) {
    element.classList.toggle('active');
  }

</script>
<!-- Add your Slick carousel initialization script at the bottom of your page -->
<script>
  $(document).ready(function () {
    // Main slider
    $('.slick-slider-main').slick({
      slidesToShow: 1,
      slidesToScroll: 1,
      arrows: true,
      fade: true,
      asNavFor: '.slick-slider-nav'
    });

    // Navigation slider
    $('.slick-slider-nav').slick({
      slidesToShow: 3,
      slidesToScroll: 1,
      asNavFor: '.slick-slider-main',
      dots: true,
      centerMode: true,
      focusOnSelect: true
    });
  });
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const logoutLink = document.getElementById("logout_main_nav");

    logoutLink.addEventListener("click", function (event) {
      event.preventDefault();

      // Send a POST request to /logout using fetch
      fetch("/logout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        // You can include any data you want to send with the request
        // For example, you might want to include a CSRF token if your server requires it
        body: JSON.stringify({}),
      })
        .then((response) => {
          if (response.status === 200) {
            // Successful logout, you can handle the redirection here if needed
            window.location.href = "/products"; // Redirect to the homepage
          } else {
            // Handle other response statuses (e.g., error)
            console.error("Logout failed");
          }
        })
        .catch((error) => {
          console.error("Error occurred during logout:", error);
        });
    });
  });

</script>

<script>
  // Function to fetch and update the cart's total from the server
function fetchAndUpdateCartTotal() {
  fetch('/cart/total', {
    method: 'GET',
  })
  .then(response => response.json())
  .then(data => {
    console.log('Cart total response:', data); // Debugging log
    // Assuming you have an element with the id 'cart-total' for the total price
    const totalElement = document.getElementById('cart-total');
    if (totalElement) {
      totalElement.innerText = `₹${parseFloat(data.total).toFixed(2)}`;
    }
  })
  .catch(error => {
    console.error('Error:', error);
  });
}



  // Function to update the quantity in the input field and send an update request
  function updateQuantity(itemId, newQuantity) {
    const priceElement = document.getElementById(`price-${itemId}`);
    const price = parseFloat(priceElement.innerText.replace('₹', ''));
    const totalElement = document.getElementById(`total-${itemId}`);
    
    fetch(`/cart/update-quantity/${itemId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ quantity: newQuantity }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Update the UI accordingly
        document.getElementById(`quantity-${itemId}`).value = newQuantity;
        // Update the total price for the item
        if (totalElement) {
          const itemTotalPrice = (price * newQuantity).toFixed(2);
          totalElement.innerText = `₹${itemTotalPrice}`;
        }
        // Fetch and update the cart's total
        fetchAndUpdateCartTotal();
      } else {
        // Handle error, maybe revert the quantity change in the input
        alert('Quantity update failed');
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
  }
  
  // Event listeners for plus and minus buttons
  document.querySelectorAll('.quantity-left-minus, .quantity-right-plus').forEach(button => {
    button.addEventListener('click', function() {
      const itemId = this.dataset.field; // Using data-field attribute as per your EJS
      const input = document.getElementById(`quantity-${itemId}`);
      let newQuantity = parseInt(input.value);
      if (this.classList.contains('quantity-left-minus')) {
        newQuantity = newQuantity > 1 ? newQuantity - 1 : 1; // Prevent quantity from going below 1
      } else {
        newQuantity = newQuantity < 10 ? newQuantity + 1 : 10; // Prevent quantity from going above 10
      }
      updateQuantity(itemId, newQuantity);
    });
  });
  
// Function to remove an item from the cart
// Function to remove an item from the cart
function removeItemFromCart(itemId) {
  fetch(`/cart/remove/${itemId}`, {
    method: 'DELETE',
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Remove the item row from the table
      document.getElementById(`item-row-${itemId}`).remove();
      // Fetch and update the cart's total after the item has been removed
      fetchAndUpdateCartTotal();
    } else {
      // Handle error
      alert('Could not remove the item');
    }
  })
  .catch(error => {
    console.error('Error:', error);
  });
}



  
  // Attach event listeners to remove item buttons
  document.querySelectorAll('.remove-item').forEach(button => {
    button.addEventListener('click', function(event) {
      event.preventDefault();
      const itemId = this.dataset.itemId;
      removeItemFromCart(itemId);
      fetchAndUpdateCartTotal();
    });
  });
  
  // Call fetchAndUpdateCartTotal on page load to ensure totals are correct
  document.addEventListener('DOMContentLoaded', fetchAndUpdateCartTotal,updateQuantity);
</script>

  
  
  

</body>

</html>